name: build and test ubuntu

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-demos:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Move to the parent directory and fetch dependencies
      - name: Fetch dependencies
        run: |
          cd ..
          git clone https://github.com/razterizer/Core.git
          git clone https://github.com/razterizer/Termin8or.git
          git clone https://github.com/razterizer/AudioLibSwitcher_OpenAL.git --recurse-submodules
          git clone https://github.com/razterizer/TrainOfThought.git

      # Step 3: Install OpenAL
      - name: Install OpenAL
        run: sudo apt install libopenal-dev
      
      # Step 4: Install libsndfile
      - name: Install libsndfile
        run: sudo apt install libsndfile-dev
        # run: sudo apt install libsndfile1-dev

      # Step 5: Change to the correct directory and build
      - name: Build project
        run: |
          cd demos
          ./build_demo_1.sh
          # ./build_demo_2.sh
          ./build_demo_3.sh
          ./build_demo_4.sh
          ./build_demo_5.sh
          ./build_demo_6.sh
          ./build_demo_7.sh
          ./build_demo_8.sh
          ./build_demo_9.sh
          ./build_demo_10.sh
        continue-on-error: false # Ensure errors are not bypassed

  build-demos-with-locked-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Move to the parent directory and fetch dependencies
      - name: Fetch dependencies
        run: |
          cd ..
          ./8Beat/fetch-dependencies.py 8Beat/dependencies -y
          
      # Step 3: Install OpenAL
      - name: Install OpenAL
        run: sudo apt install libopenal-dev
      
      # Step 4: Install libsndfile
      - name: Install libsndfile
        run: sudo apt install libsndfile-dev
        # run: sudo apt install libsndfile1-dev
      
      # Step 5: Change to the correct directory and build
      - name: Build
        run: |
          cd demos
          ./build_demo_1.sh
          # ./build_demo_2.sh
          ./build_demo_3.sh
          ./build_demo_4.sh
          ./build_demo_5.sh
          ./build_demo_6.sh
          ./build_demo_7.sh
          ./build_demo_8.sh
          ./build_demo_9.sh
          ./build_demo_10.sh
        continue-on-error: false # Ensure errors are not bypassed

  build-unit-tests:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Move to the parent directory and fetch dependencies
      - name: Fetch dependencies
        run: |
          cd ..
          git clone https://github.com/razterizer/Core.git
          git clone https://github.com/razterizer/TrainOfThought.git

      # Step 3: Change to the correct directory and build
      - name: Build
        run: |
          cd Tests
          ./build_unit_tests.sh
        continue-on-error: false # Ensure errors are not bypassed

      # Step 4: Upload the built unit test binaries as artifacts
      - name: Upload unit test binaries
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-artifacts
          path: Tests/bin

  run-unit-tests:
    needs: build-unit-tests
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: List files
        run: |
          pwd
          ls
        
      # Step 2: Create the bin folder if it doesn't exist
      - name: Create bin folder
        run: mkdir -p Tests/bin

      # Step 3: Download the artifacts from the previous job
      - name: Download unit test binaries
        uses: actions/download-artifact@v4
        with:
          name: unit-test-artifacts
          path: Tests/bin

      # Step 4: Run the unit tests
      - name: Run unit tests
        run: |
          cd Tests
          chmod ugo+x bin/unit_tests
          ./bin/unit_tests
        continue-on-error: false # Ensure errors are not bypassed

  static-analysis:
    runs-on: ubuntu-latest
    if: true # turn off for now.
  
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
  
      # Install Clang Static Analyzer tools
      - name: Install Clang Static Analyzer
        run: sudo apt-get install clang-tools
        
      # Move to the parent directory and fetch dependencies
      - name: Fetch dependencies
        run: |
          cd ..
          git clone https://github.com/razterizer/Core.git
          git clone https://github.com/razterizer/TrainOfThought.git
          git clone https://github.com/razterizer/AudioLibSwitcher_OpenAL.git --recurse-submodules
          
      # Install OpenAL
      - name: Install OpenAL
        run: sudo apt install libopenal-dev
      
      # Install libsndfile
      - name: Install libsndfile
        run: sudo apt install libsndfile-dev
        # run: sudo apt install libsndfile1-dev
  
      # Run Clang Static Analyzer on static_analysis.cpp
      - name: Run Clang Static Analyzer
        run: |
          scan-build clang++ -std=c++20 -c static_analysis.cpp -Iinclude/8Beat -I../Core/include -I../TrainOfThought/include -I../AudioLibSwitcher_OpenAL/include

  generate-loc-badge:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # Step 2: Install cloc
      - name: Install cloc
        run: sudo apt-get install -y cloc
      
      # Step 3: Count C++ LOC and generate badge as SVG
      - name: Count C++ LOC and generate badge
        run: |
          mkdir -p badges
          CLOC_RESULT=$(cloc --include-ext=cpp,h --json . | jq '.SUM.code')
          echo "$CLOC_RESULT"

          if [ "$CLOC_RESULT" -lt 10000 ]; then
            HUMAN_READABLE=$(printf "%'d" "$CLOC_RESULT" | sed 's/,/ /g')
          else
            HUMAN_READABLE=$(awk "BEGIN { printf \"%.1f k\", $CLOC_RESULT / 1000 }")
          fi

          LABEL="C++ lines"
          LABEL_LEN=${#LABEL}
          VALUE_LEN=${#HUMAN_READABLE}

          # Text length in 1/10 px units (shields.io uses 90-110 per char as base)
          LABEL_TEXTLEN=$((LABEL_LEN * 70))
          VALUE_TEXTLEN=$((VALUE_LEN * 70))

          # Box widths in normal px (scale 0.1 used later)
          LABEL_WIDTH=$((LABEL_TEXTLEN / 10 + 10))
          VALUE_WIDTH=$((VALUE_TEXTLEN / 10 + 10))
          TOTAL_WIDTH=$((LABEL_WIDTH + VALUE_WIDTH))

          # Positions for centered text
          LABEL_CENTER=$((LABEL_WIDTH * 10 / 2))
          VALUE_CENTER=$((LABEL_WIDTH * 10 + VALUE_WIDTH * 10 / 2))

          # Create SVG
          cat <<EOF > badges/loc-badge.svg
          <svg xmlns="http://www.w3.org/2000/svg" width="$TOTAL_WIDTH" height="20" role="img" aria-label="$LABEL: $HUMAN_READABLE">
            <title>$LABEL: $HUMAN_READABLE</title>
            <linearGradient id="s" x2="0" y2="100%">
              <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
              <stop offset="1" stop-opacity=".1"/>
            </linearGradient>
            <clipPath id="r">
              <rect width="$TOTAL_WIDTH" height="20" rx="3" fill="#fff"/>
            </clipPath>
            <g clip-path="url(#r)">
              <rect width="$LABEL_WIDTH" height="20" fill="#555"/>
              <rect x="$LABEL_WIDTH" width="$VALUE_WIDTH" height="20" fill="#007ec6"/>
              <rect width="$TOTAL_WIDTH" height="20" fill="url(#s)"/>
            </g>
            <g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110">
              <text aria-hidden="true" x="$LABEL_CENTER" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="$LABEL_TEXTLEN">$LABEL</text>
              <text x="$LABEL_CENTER" y="140" transform="scale(.1)" fill="#fff" textLength="$LABEL_TEXTLEN">$LABEL</text>
              <text aria-hidden="true" x="$VALUE_CENTER" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="$VALUE_TEXTLEN">$HUMAN_READABLE</text>
              <text x="$VALUE_CENTER" y="140" transform="scale(.1)" fill="#fff" textLength="$VALUE_TEXTLEN">$HUMAN_READABLE</text>
            </g>
          </svg>
          EOF

      # Step 4: Commit and push the badge to the "badges" branch
      - name: Commit and push badge to badges branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch the latest badges branch
          git fetch origin badges || true
          git checkout badges || git checkout --orphan badges

          # Merge remote changes if the branch already exists
          git pull origin badges --rebase || true

          # Copy badge to the branch and commit
          cp -r badges/* .
          git add loc-badge.svg
          git commit -m "Update LOC badge" || echo "No changes to commit"

          # Push the updated branch
          git push origin badges --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
